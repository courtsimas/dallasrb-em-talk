!!! 5
%html{lang: 'en'}
  %head
    %title="The Main Event...Machine"
    %link{rel:"stylesheet", href: "deck.core.css", type:"text/css"}
    %link{rel:"stylesheet", href:"themes/style/web-2.0.css", type:"text/css"}
    %meta{name: "viewport", content: "width=1024, user-scalable=no" }
    %script{src:"modernizr-1.7.min.js"}
  %body.deck-container
    %section.slide
      %h1
        Please go to
        %a{href: "http://em.jessedearing.com", style: "font-size: 70px"}
          http://em.jessedearing.com
    %section.slide
      %h2 Do not attempt to adjust your browser settings
      %img{src: "outerlimits.jpg"}
    %section.slide
      %h1 Now for the main event...
    %section.slide
      %h2 Who am I?
      %p Jesse Dearing
      %p Developer
      %p
        %a{href: "http://purecharity.com", target: "_blank"}
          Pure Charity
      %p
        I blog at
        %a{href: "http://jessedearing.com", target: "_blank"}
          JesseDearing.com
    %section.slide
      %h2 What is event driven programming?
      %ul
        %li.slide Execution of the program is driven by events
        %li.slide Synchronous but non-blocking (not truely asynchronous, but can be considered asynchronous with threads)
        %li.slide Uses the Reactor Pattern
    %section.slide
      %h2 Isn't that like Node.js?
      %p Yeah, but so is...
      %ul
        %li.slide Twisted (Python)
        %li.slide MINA (Java)
        %li.slide AnyEvent (Perl)
      %p.slide Event driven frameworks are not new, they are just hot right now because of Node.js
    %section.slide
      %h2 The Reactor Pattern
      %img{src: "iron.jpg"}
      %p.slide Not that kind of reactor
    %section.slide
      %h2 The Reactor Pattern
      %h3 Components
      %ul
        %li.slide
          Synchronous Event Demuliplexer
          %ul
            %li Sends the resource to the dispatcher when it can be processed can complete it in a synchronous manner.
            %li Listens to Network, File System, Key presses, etc.
        %li.slide
          Dispatcher
          %ul
            %li Registers and unregisters the request handlers. Routes the resource to the proper handler.
        %li.slide
          Request Handler
          %ul
            %li This is the code we write
            %li Accomplished mostly with callbacks
    %section
      .slide
        %h2 The Reactor Pattern
        %h3 Resturanut Analogy
        %h4 Traditional (Buffet)
        %img{src: "buffet.jpg"}
        %p
          Get up and go get your food from buffet. You are blocking because you
          are solely focused on retreiving your foodstuffs.
      .slide
        %h2 The Reactor Pattern
        %h3 Resturanut Analogy
        %h4 Reactor (Waiter)
        %img{src: "waiter.jpg"}
        %p
          Give your order to a waiter and you are free to carry on a conversation
          or watch the game at the bar, etc.
    %section.slide
      %h2 Getting Started With EventMachine
      %h3 The Event Loop
      %pre
        %code
          :preserve
            require 'eventmachine'

            EM.run do
              # All your evented code goes here
              # A while(true) loop is running where you plug your events into
            end
    %section.slide
      %h2 Getting Started With EventMachine
      %h3 Things you can do in the event loop
      %ul
        %li
          %code
            EM.add_timer(seconds, &amp;block)
          \- A one shot timer that executes the block in the specified number of seconds
        %li
          %code
            EM.add_periodic_timer(seconds, &amp;block)
          \- Like
          %code add_timer
          but repeats indefinitely
        %li
          %code
            EM.start_server(server, port, handler, &amp;block)
          \- Listens for input on a port and passes that input to the specified handler.
        %li
          %code
            EM.stop
          \- Stops the event loop after all callbacks in progress have completed
    %section.slide
      %h2 Getting Started With EventMachine
      %h3 Rules of EventMachine
      %ul
        %li.slide Do not block the event loop
        %li.slide
          %strong Do not block the event loop
        %li.slide All I/O should be done on the main thread
        -# Jump into code example about what it means to block the event loop
    %section.slide
      %h2 Plugins
      %p
        There are a lot of plugins written for EventMachine that will allow you to write
        evented code for WebSockets, XMPP, DNS, MySQL, Cassandra, MongoDB, Redis, and IRC just
        to name a few.
      %p
        Libraries need to be written for EventMachine to be non-blocking
      %p.slide
        Net::HTTP blocks
      %p.slide
        EM::HttpClient does not block
    %section.slide
      %h2 Tick tock
      %ul
        %li
          %code next_tick
          Schedules something to happen on the next iteration of the Reactor on
          the main thread (regardless of where it is called)
        %li
          Useful if you are writing an evented library that is scheduling it's next action.
          I.e. needs to retreive the next chunk from the buffer or check queues for new data to
          process
    %section.slide
      %h2 Deferred Disposition
      %p.slide
        %img{src: "warning.png", style: "width: 48px; height: 48px;"}
        Don't get EM.defer and EM::Deferrable confused. They are not really related.
    %section.slide
      %h2 Deferred Disposition
      %p
        EM.defer will pass the block given to a thread from the EventMachine thread pool
      %p
        There are 20 threads in the thread pool by default
    %section.slide
      %h2 EventMachine Helper Classes
      %ul
        %li
          %code
            EM::Queue
          %br
          A simple in memory queue with a callback on
          %code
            pop
        %li
          %code
            EM::Channel
          %br
          A publish/subscribe mechanism to facilitate multicasting
    %section.slide
      %h2 EM::Queue
      %p
        Used for queuing data to be processed by another thread or in another tick of the event loop
        %strong
          Not like Resque or RabbitMQ
      %p.slide
        %code
          pop
        is single shot and then the callback is cleared, but the callback is only
        called when the queue has at least one item to process
    %section.slide
      %h2 They Call Me The Queueopotamus
      %p
        %img{src: "rhymenoceros.png"}
      %p My callbacks are bottomless...
    %section.slide
      %h2 They Call Me The Queueopotamus
      %pre
        %code
          :preserve
            EM.run do
              q = EM::Queue.new

              # Enqueue some data here...

              popper = proc do |item|
                # Do something with the enqueued item

                # Pass this method address to be called next time an item
                # needs to be processed
                EM.next_tick { q.pop(&popper) }
              end

              # Set up the callback initially to be called
              q.pop(&popper)
            end
    %section.slide
      %h2 EM::Channel
      %ul
        %li
          %code
            subscribe(&amp;block)
          \- Pass a proc to process messages received on the channel
        %li
          %code
            unsubscribe(subscription_id)
          \- Unsubscribe from a channel to longer process messages
        %li
          %code
            \&lt;&lt;
          \- Sends a message to all subscribers (publish)
    %section.slide
      %h2 EM::Channel
      %pre
        %code
          :preserve
            EM.run do
              c = EM::Channel.new

              EM.defer do
                c.subscribe {|p| puts "This just in: \#{p}" }
              end

              EM.add_periodic_timer(1) do
                c &lt;&lt; "EventMachine rocks"
              end
            end
    %section.slide
      %h2 EM::Deferrable
      %ul
        %li
          A lot of EventMachine libraries use
          %code
            EM::Deferrable
          to let you set up success and failure callbacks
        %li.slide
          Deferrable has two callbacks:
          %ul
            %li
              %code
                callback
              \- Executed when the
              %code
                succeed
              method is called
            %li
              %code
                errback
              \- Executed when the
              %code
                fail
              method is called
    %section.slide
      %h2 EM::Deferrable
      An example is an HTTP request
      %pre
        %code
          :preserve
            require 'eventmachine'
            require 'em-http-request'

            EM.run do
              http = EM::HttpRequest.new("http://www.google.com/").get
              http.callback do
                puts "Status: \#{http.response_header.status}"
                puts "Headers: \#{http.response_header.inspect}"
                puts "Content:"
                puts http.response
                EM.stop
              end

              http.errback do
                puts "there was an error"
                EM.stop
              end
            end
    %section.slide
      %h2 Advanced EventMachine
      %h3 Ruby Fibers (1.9 only)
      %p
        Allows for lightweight concurrency in applications by allowing applications to yield and resume execution.
      %pre
        %code
          :preserve
            # Via Mathias Meyer
            Fiber.new do
              f = Fiber.current
              request = EM::HttpRequest.new('http://jsonip.com').get
              request.callback {f.resume(request)}
              request.errback  {f.resume(request)}
              puts Fiber.yield.response
            end.resume
    %section.slide
      %h2 Advanced EventMachine
      %img{src: "bill_fibers.jpg"}
    %section.slide
      %h2 Advanced EventMachine
      %h3 em-synchrony
      %p Utilizes Fibers to make code seem synchronous
    %section.slide
      %h2 Advanced EventMachine
      %h3 em-synchrony
      %pre
        %code
          :preserve
            require "lib/em-synchrony"
            require "net/http"

            $VERBOSE = nil

            EM.synchrony do
              # monkey patch default Socket code to use EventMachine Sockets instead
              TCPSocket = EventMachine::Synchrony::TCPSocket

              Net::HTTP.get_print 'www.google.com', '/index.html'

              EM.stop
            end
    %section.slide
      %h2 Advanced EventMachine
      %h3 Goliath
      %p A web server that utilizes fibers to serve non-blocking requests
    %section.slide
      %h2 Advanced EventMachine
      %h3 Goliath
      %pre
        %code
          :preserve
            class Echo < Goliath::API
              use Goliath::Rack::Tracer             # log trace statistics
              use Goliath::Rack::DefaultMimeType    # cleanup accepted media types
              use Goliath::Rack::Render, 'json'     # auto-negotiate response format
              use Goliath::Rack::Params             # parse & merge query and body parameters
              use Goliath::Rack::Heartbeat          # respond to /status with 200, OK (monitoring, etc)

              # If you are using Golaith version <=0.9.1 you need to Goliath::Rack::ValidationError
              # to prevent the request from remaining open after an error occurs
              #use Goliath::Rack::ValidationError
              use Goliath::Rack::Validation::RequestMethod, %w(GET POST)           # allow GET and POST requests only
              use Goliath::Rack::Validation::RequiredParam, {:key => 'echo'}  # must provide ?echo= query or body param

              plugin Goliath::Plugin::Latency       # output reactor latency every second

              def process_request
                logger.info "Processing request"

                {response: env.params['echo']}
              end

              def response(env)
                [200, {}, process_request]
              end
            end
    %section.slide
      %h2 Code Walkthrough
      %p Let's look at the code that brought you this presentation
      %p
        %a{href: "http://github.com/jessedearing/dallasrb-em-talk", target: "_blank"}
          Github

    %section.slide
      %h2 Let's Build an Echo Server
      %p The "Hello World" of network programs

    %section.slide
      %h1
        Thanks!

    %script{src:"jquery-1.6.2.min.js"}
    %script{src:"deck.core.js"}
    %script{src:"extensions/hash/deck.hash.js"}
    :javascript
      $(function() {
        var presenter = true;
        if(!presenter) {
          var wsUri = "ws://jessedearing:8080/";
          var webSock = new WebSocket(wsUri);
          var wsConnected = false;
          webSock.onopen = function() {
            wsConnected = true;
          };
          webSock.onmessage = function(evt) {
            $.deck('go', $.parseJSON(evt.data).slide_number);
          };
          webSock.onerror = function(evt) {
            window.location.reload();
          };
          webSock.onclose = function() {
            window.location.reload();
          };
          $.deck.defaults.keys.next = [];
          $.deck.defaults.keys.previous = [];
        }
        else {
          $(document).unbind('keydown.em').bind('keydown.em', function(e) {
            if(e.which === $.deck.defaults.keys.next || $.inArray(e.which, $.deck.defaults.keys.next) > -1) {
              $.get("http://localhost:9000/forward");
            }
            else if(e.which === $.deck.defaults.keys.previous || $.inArray(e.which, $.deck.defaults.keys.previous) > -1) {
              $.get("http://localhost:9000/back");
            }
          });
        }
        $.deck('.slide')
        $('.deck-container').unbind('touchstart.deck').unbind('touchmove.deck').unbind('touchend.deck');
      });
